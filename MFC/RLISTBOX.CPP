/*
	 MiG Alley
	 Copyright (C) 1998, 1999, 2000, 2001 Empire Interactive (Europe) Ltd,
	 677 High Road, North Finchley, London N12 0DA

	 Please see the document licence.doc for the full licence agreement

2. LICENCE
 2.1 	
 	Subject to the provisions of this Agreement we now grant to you the 
 	following rights in respect of the Source Code:
  2.1.1 
  	the non-exclusive right to Exploit  the Source Code and Executable 
  	Code on any medium; and 
  2.1.2 
  	the non-exclusive right to create and distribute Derivative Works.
 2.2 	
 	Subject to the provisions of this Agreement we now grant you the
	following rights in respect of the Object Code:
  2.2.1 
	the non-exclusive right to Exploit the Object Code on the same
	terms and conditions set out in clause 3, provided that any
	distribution is done so on the terms of this Agreement and is
	accompanied by the Source Code and Executable Code (as
	applicable).

3. GENERAL OBLIGATIONS
 3.1 
 	In consideration of the licence granted in clause 2.1 you now agree:
  3.1.1 
	that when you distribute the Source Code or Executable Code or
	any Derivative Works to Recipients you will also include the
	terms of this Agreement;
  3.1.2 
	that when you make the Source Code, Executable Code or any
	Derivative Works ("Materials") available to download, you will
	ensure that Recipients must accept the terms of this Agreement
	before being allowed to download such Materials;
  3.1.3 
	that by Exploiting the Source Code or Executable Code you may
	not impose any further restrictions on a Recipient's subsequent
	Exploitation of the Source Code or Executable Code other than
	those contained in the terms and conditions of this Agreement;
  3.1.4 
	not (and not to allow any third party) to profit or make any
	charge for the Source Code, or Executable Code, any
	Exploitation of the Source Code or Executable Code, or for any
	Derivative Works;
  3.1.5 
	not to place any restrictions on the operability of the Source 
	Code;
  3.1.6 
	to attach prominent notices to any Derivative Works stating
	that you have changed the Source Code or Executable Code and to
	include the details anddate of such change; and
  3.1.7 
  	not to Exploit the Source Code or Executable Code otherwise than
	as expressly permitted by  this Agreement.

questions about this file may be asked at http://www.simhq.com/
*/

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "rlistbox.h"

/////////////////////////////////////////////////////////////////////////////
// CRListBox

IMPLEMENT_DYNCREATE(CRListBox, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CRListBox properties

BOOL CRListBox::GetIsStripey()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetIsStripey(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

OLE_COLOR CRListBox::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_COLOR CRListBox::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

unsigned long CRListBox::GetStripeColor()
{
	unsigned long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetStripeColor(unsigned long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CRListBox::GetSelectColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetSelectColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

BOOL CRListBox::GetLines()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetLines(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

unsigned long CRListBox::GetLineColor()
{
	unsigned long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetLineColor(unsigned long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

unsigned long CRListBox::GetDarkStripeColor()
{
	unsigned long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetDarkStripeColor(unsigned long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

unsigned long CRListBox::GetDarkBackColor()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetDarkBackColor(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

BOOL CRListBox::GetLockLeftColumn()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetLockLeftColumn(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CRListBox::GetLockTopRow()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetLockTopRow(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

unsigned long CRListBox::GetLockColor()
{
	unsigned long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetLockColor(unsigned long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CRListBox::GetDragAndDrop()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetDragAndDrop(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

long CRListBox::GetFontNum()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetFontNum(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

BOOL CRListBox::GetBlackboard()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetBlackboard(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

long CRListBox::GetFontNum2()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetFontNum2(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

BOOL CRListBox::GetLines2()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetLines2(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

unsigned long CRListBox::GetHeaderColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetHeaderColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

BOOL CRListBox::GetSelectWholeRows()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetSelectWholeRows(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

long CRListBox::GetFontPtr()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetFontPtr(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CRListBox::GetParentPointer()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetParentPointer(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CRListBox::GetHilightRow()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetHilightRow(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CRListBox::GetHilightCol()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetHilightCol(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

BOOL CRListBox::GetBorder()
{
	BOOL result;
	GetProperty(0x16, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetBorder(BOOL propVal)
{
	SetProperty(0x16, VT_BOOL, propVal);
}

BOOL CRListBox::GetCentred()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetCentred(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

long CRListBox::GetHorzSeperation()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetHorzSeperation(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CRListBox::GetVertSeperation()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetVertSeperation(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

BOOL CRListBox::GetToggleResizableColumns()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetToggleResizableColumns(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}

short CRListBox::GetScrlBarOffset()
{
	short result;
	GetProperty(0x1b, VT_I2, (void*)&result);
	return result;
}

void CRListBox::SetScrlBarOffset(short propVal)
{
	SetProperty(0x1b, VT_I2, propVal);
}

unsigned long CRListBox::GetShadowSelectColour()
{
	unsigned long result;
	GetProperty(0x1c, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetShadowSelectColour(unsigned long propVal)
{
	SetProperty(0x1c, VT_I4, propVal);
}

unsigned long CRListBox::GetShadowLineColor()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CRListBox::SetShadowLineColor(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

BOOL CRListBox::GetDrawBackgGound()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CRListBox::SetDrawBackgGound(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CRListBox operations

short CRListBox::GetCount()
{
	short result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CRListBox::AddString(LPCTSTR text, short index)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 text, index);
}

void CRListBox::DeleteString(short row, short column)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 row, column);
}

void CRListBox::Clear()
{
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRListBox::AddColumn(long width)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 width);
}

void CRListBox::SetColumnWidth(short index, long width)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, width);
}

void CRListBox::AddPlayerNum(long playerNum)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 playerNum);
}

long CRListBox::DeletePlayerNum(short row)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		row);
	return result;
}

long CRListBox::ReplacePlayerNum(long playerNum, short row)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		playerNum, row);
	return result;
}

void CRListBox::ReplaceString(LPCTSTR text, short row, short col)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 text, row, col);
}

long CRListBox::GetString(short row, short col)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		row, col);
	return result;
}

long CRListBox::GetPlayerNum(short row)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		row);
	return result;
}

short CRListBox::GetRowFromY(long y)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		y);
	return result;
}

void CRListBox::UpdateScrollBar()
{
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CRListBox::GetListHeight()
{
	long result;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CRListBox::ResizeToFit()
{
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CRListBox::GetColumnWidth(long col)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		col);
	return result;
}

void CRListBox::SetNumberOfRows(long rows)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 rows);
}

void CRListBox::InsertRow(long row)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 row);
}

void CRListBox::DeleteRow(long row)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 row);
}

void CRListBox::Shrink()
{
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CRListBox::SelectRecentlyFired()
{
	BOOL result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CRListBox::AddIconColumn(long width)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 width);
}

void CRListBox::AddIcon(long filenum, short index)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 filenum, index);
}

void CRListBox::SetHorizontalOption(short columns)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 columns);
}

short CRListBox::GetColFromX(long x)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		x);
	return result;
}

long CRListBox::GetRowColPlayerNum(long row, long col)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		row, col);
	return result;
}

void CRListBox::SetColumnRightAligned(long index, BOOL bNewVal)
{
	static BYTE parms[] =
		VTS_I4 VTS_BOOL;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 index, bNewVal);
}

void CRListBox::SetRowColour(long row, long RGBcolour)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 row, RGBcolour);
}

void CRListBox::SetIcon(long filenum, short row, short column)
{
	static BYTE parms[] =
		VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 filenum, row, column);
}
