/*
	 MiG Alley
	 Copyright (C) 1998, 1999, 2000, 2001 Empire Interactive (Europe) Ltd,
	 677 High Road, North Finchley, London N12 0DA

	 Please see the document licence.doc for the full licence agreement

2. LICENCE
 2.1 	
 	Subject to the provisions of this Agreement we now grant to you the 
 	following rights in respect of the Source Code:
  2.1.1 
  	the non-exclusive right to Exploit  the Source Code and Executable 
  	Code on any medium; and 
  2.1.2 
  	the non-exclusive right to create and distribute Derivative Works.
 2.2 	
 	Subject to the provisions of this Agreement we now grant you the
	following rights in respect of the Object Code:
  2.2.1 
	the non-exclusive right to Exploit the Object Code on the same
	terms and conditions set out in clause 3, provided that any
	distribution is done so on the terms of this Agreement and is
	accompanied by the Source Code and Executable Code (as
	applicable).

3. GENERAL OBLIGATIONS
 3.1 
 	In consideration of the licence granted in clause 2.1 you now agree:
  3.1.1 
	that when you distribute the Source Code or Executable Code or
	any Derivative Works to Recipients you will also include the
	terms of this Agreement;
  3.1.2 
	that when you make the Source Code, Executable Code or any
	Derivative Works ("Materials") available to download, you will
	ensure that Recipients must accept the terms of this Agreement
	before being allowed to download such Materials;
  3.1.3 
	that by Exploiting the Source Code or Executable Code you may
	not impose any further restrictions on a Recipient's subsequent
	Exploitation of the Source Code or Executable Code other than
	those contained in the terms and conditions of this Agreement;
  3.1.4 
	not (and not to allow any third party) to profit or make any
	charge for the Source Code, or Executable Code, any
	Exploitation of the Source Code or Executable Code, or for any
	Derivative Works;
  3.1.5 
	not to place any restrictions on the operability of the Source 
	Code;
  3.1.6 
	to attach prominent notices to any Derivative Works stating
	that you have changed the Source Code or Executable Code and to
	include the details anddate of such change; and
  3.1.7 
  	not to Exploit the Source Code or Executable Code otherwise than
	as expressly permitted by  this Agreement.

questions about this file may be asked at http://www.simhq.com/
*/

//------------------------------------------------------------------------------
//Filename       error.cpp
//System         
//Author         Martin Alderton   
//Date           Fri 6 Oct 1995
//Description    
//------------------------------------------------------------------------------

#include	<stdio.h>
#include	<stdlib.h>
#include	<stdarg.h>
#include	<conio.h>										//pd 01Nov95
#include <exception>
#include	<dos.h>										//pd 01Nov95
#include	"DosDefs.h"
//DeadCode DAW 01Mar96 #include	"Files.g"
#include	"Palette.h"
//DeadCode DAW 15Apr96 #include	"screen.h"
//#include	"wrapper.h"
#include	"myerror.h"
//DeadCode DAW 19Mar96 #include	"getset.h"
#include	"myAngles.H"	

#include	"WorldInc.H"
#include	"World.h"


//DeadCode ARM 17Sep96 #include	"main.h"

//DeadCode JIM 02Jul96 #include	<assert.h>											//ARM 26Jun96

#include	<windows.h>											//ARM 20Jun96
//#include	"winmain.h"

#include	"stub3d.h"
//extern Main 	_Main;
//DeadCode PD 26Oct95 extern Wrapper	_Wrapper;

Error	_Error;

extern		void	TraceChain(int x);
extern		void	TrackMemUse();

//------------------------------------------------------------------------------
//Procedure		Error
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
char*	Error::terminatecondition=NULL;
char*	Error::stackedterminatecondition=NULL;
bool	Error::pleasereport=true;
bool	Error::pleaselog=true;
Error::Error()
{
//DeadCode DAW 10Apr96 	#if	DEBUGGING
//DeadCode DAW 10Apr96 		OpenLog();
//DeadCode DAW 10Apr96 	#endif
	exitmsg="";
	//set_terminate(terminate);
	ReportLastRunError();

//DeadCode DAW 19Dec96 	exitmsg="Program exitted normally";							//ARM 17Sep96
}
static char* errorfilename="\\MIG_ALLEY_LAST_ERROR.LOG";
static char* buerrorfilename="\\MIG_ALLEY_LAST_ERROR_REPEAT.LOG";
void	Error::ReportLastRunError()
{
		FILE* file=fopen(errorfilename,"rt");
		if (file)
		{
			char buffer[800];
			fread(buffer,400,1,file);
			buffer[400]=0;
			fclose(file);
			strcat(buffer,"\n\nThe above error was recorded on the previous run."
							"\nThe file below will now be deleted:\n"
							);
			strcat(buffer,errorfilename);
			strcat(buffer,"\nThe file below logs all errors that have been generated by MigAlley:\n");
			strcat(buffer,buerrorfilename);
			MessageBox (NULL, buffer, "For your information.", MB_OK);
			remove(errorfilename);
		}
}
void	Error::terminate()
{
	if (terminatecondition==NULL)
		terminatecondition="Location not known";
	if (pleasereport)
	{
		MessageBox (NULL, terminatecondition, "Bad program exit", MB_OK);
	}
	if (pleaselog)
	{
		FILE* file=fopen(errorfilename,"wt");
		if (file)
		{
			int i;
			for (i=0;i<300;i++)
				breakif(terminatecondition[i]==0);
			fwrite(terminatecondition,i+1,1,file);
			fwrite("\n",2,1,file);
			fclose(file);
		}
	}
	abort();
}
//------------------------------------------------------------------------------
//Procedure		Error
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
Error::~Error()
{
//DeadCode DAW 10Apr96 	#if	DEBUGGING
//DeadCode DAW 10Apr96 		CloseLog();
//DeadCode DAW 10Apr96 	#endif
}

//------------------------------------------------------------------------------
//Procedure	Error::EmitSysErr
//------------------------------------------------------------------------------
//Author	Martin Alderton   
//Date		Friday 6 Oct 1995
//Modified	
//
//Description	
//
//Inputs	
//
//Returns	
//
//Externals
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

Error& Error::ExitMode()	
{
	Master_3d.Stop();
	return this _;
}
Error& Error::Say(char *, ...)	{return this _;}

Error& Error::SayAndQuit(const char *fmt, ...)
{
//DEADCODE DAW 18/02/00 		UByteP(0xB0000)[320]='S';
//DEADCODE DAW 18/02/00 		UByteP(0xB0000)[322]='Y';
//DEADCODE DAW 18/02/00 		UByteP(0xB0000)[324]='S';
//DEADCODE DAW 18/02/00 		UByteP(0xB0000)[326]='E';
//DEADCODE DAW 18/02/00 		UByteP(0xB0000)[328]='R';

static	char String [256];

//TempCode ARM 10Dec96 	TraceChain(0);
//TempCode ARM 10Dec96 	TrackMemUse();

	va_list	marker;

	va_start(marker, fmt);

	Master_3d.QuitGame();

	vsprintf(String, fmt, marker);
	exitmsg=String;

//TEMP	DestroyWindow ( _Main.hWnd );


	MessageBox (Master_3d.winst, String, "SysError", MB_OK);
	FILE* file=fopen(errorfilename,"wt");
	if (file)
	{
		int i;
		for (i=0;i<300;i++)
			breakif(exitmsg[i]==0);
		fwrite(exitmsg,i+1,1,file);
		fwrite("\n",2,1,file);
		fclose(file);
	}
	file=fopen(buerrorfilename,"at");
	if (file)
	{
		int i;
		for (i=0;i<300;i++)
			breakif(exitmsg[i]==0);
		fwrite(exitmsg,i,1,file);
		fwrite("\n",1,1,file);
		fclose(file);
	}

//TempCode ARM 20Jun96 	fprintf(stdout, "\n");
//TempCode ARM 10Jul96 	assert(FALSE);
	exit(0);
	return	*(Error*)NULL;

}

	#if	DEBUGGING
//------------------------------------------------------------------------------
//Procedure		screenswap
//Author		Paul.   
//Date			Fri 20 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
//TempCode ARM 05Aug96 void Error::screenswap(Display *screen)							//JIM 12Dec95
//TempCode ARM 05Aug96 {
//TempCode ARM 05Aug96 	screen->ScreenSwap();								//PD 29Nov95
//TempCode ARM 05Aug96 }

//------------------------------------------------------------------------------
//Procedure		OpenLog
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
void Error::OpenLog()
{
	if((logfile = fopen("main.log","wt"))==NULL)
		EmitSysErr(__FILE__":Can't open log file.");

}

//------------------------------------------------------------------------------
//Procedure		WriteToLog
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
void Error::WriteToLog(char *fmt,...)
{
	va_list marker;

	va_start(marker,fmt);

	vfprintf(logfile,fmt,marker);
}

//------------------------------------------------------------------------------
//Procedure		CloseLog
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
void Error::CloseLog()
{
	fclose(logfile);
}

//------------------------------------------------------------------------------
//Procedure		KeyTrap
//Author		Paul.   
//Date			Fri 13 Oct 1995
//
//Description	
//
//Inputs		
//
//Returns	
//
//------------------------------------------------------------------------------
void Error::KeyTrap()
{
	char	c;
	if(kbhit())
	{
		c=getch()&0x00FF;
		if(c==' ')
			INT3;
	}
}

	#endif

//Old_Code PD 16Jan96 	#if	DEBUGGING
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 	#include	<stddef.h>
//Old_Code PD 16Jan96 	#include	<stdlib.h>
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 static SLong malloced=0;
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 //------------------------------------------------------------------------------
//Old_Code PD 16Jan96 //Procedure		my_malloc
//Old_Code PD 16Jan96 //Author		Paul.   
//Old_Code PD 16Jan96 //Date			Tue 16 Jan 1996
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Description	Replacement for 'new'
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Inputs		
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Returns	
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //------------------------------------------------------------------------------
//Old_Code PD 16Jan96 void *my_malloc(size_t s)
//Old_Code PD 16Jan96 {
//Old_Code PD 16Jan96 	void *retval;
//Old_Code PD 16Jan96 	if((retval=malloc(s))==NULL)
//Old_Code PD 16Jan96 	{
//Old_Code PD 16Jan96 		retval=(void *)0x0A0000;
//Old_Code PD 16Jan96 		INT3();
//Old_Code PD 16Jan96 	}
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 	malloced+=(SLong)s;
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 	return(retval);
//Old_Code PD 16Jan96 }
//Old_Code PD 16Jan96 
//Old_Code PD 16Jan96 //------------------------------------------------------------------------------
//Old_Code PD 16Jan96 //Procedure		my_delete
//Old_Code PD 16Jan96 //Author		Paul.   
//Old_Code PD 16Jan96 //Date			Tue 16 Jan 1996
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Description	
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Inputs		
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //Returns	
//Old_Code PD 16Jan96 //
//Old_Code PD 16Jan96 //------------------------------------------------------------------------------
//Old_Code PD 16Jan96 void my_delete(void *p)
//Old_Code PD 16Jan96 {
//Old_Code PD 16Jan96 	malloced-=*((SLongP )p-4);
//Old_Code PD 16Jan96 	free(p);
//Old_Code PD 16Jan96 }
//Old_Code PD 16Jan96 	#endif
